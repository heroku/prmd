## <%= title %>
<%= definition['description'] %>

<%- if definition['properties'] %>
### Attributes
<table>
  <tr>
    <th>Name</th>
    <th>Type</th>
    <th>Description</th>
    <th>Example</th>
  </tr>
  <%- extract_attributes(schema, definition['properties']).each do |(key, type, description, example)| %>
  <tr>
    <td><strong><%= key %></strong></td>
    <td><em><%= type %></em></td>
    <td><%= description %></td>
    <td><%= example %></td>
  </tr>
  <%- end %>
</table>

<%- end %>
<%- definition['links'].each do |link, datum| %>
<%- path = link['href'].gsub(%r|(\{\([^\)]+\)\})|) do |ref|
  ref = ref.gsub('%2F', '/').gsub('%23', '#').gsub(%r|[\{\(\)\}]|, '')
  resource = ref.split('#/definitions/').last.split('/definitions/identity').first.gsub('-', '_')
  identity, key = schema.dereference(ref)
  if identity.has_key?('anyOf')
    '{' + resource + '_' + identity['anyOf'].map {|r| r['$ref'].split('/').last}.join('_or_') + '}'
  else
    '{' + resource + '_' + key + '}'
  end
end -%>
### <%= title %> <%= link['title'] %>
<%= link['description'] %>

```
<%= link['method'] %> <%= path %>
```

<%- if link.has_key?('schema') && link['schema'].has_key?('properties') %>
<%-
  required, optional = link['schema']['properties'].partition do |k, v|
    (link['schema']['required'] || []).include?(k)
  end.map { |partition| Hash[partition] }
%>
<%- unless required.empty? %>
#### Required Parameters
<%= Erubis::Eruby.new(params_template).result(params: required, schema: schema) %>

<%- end %>
<%- unless optional.empty? %>
#### Optional Parameters
<%= Erubis::Eruby.new(params_template).result(params: optional, schema: schema) %>
<%- end %>
<%- end %>

#### Curl Example
```term
<%- path = path.gsub(/{([^}]*)}/) {|match| '$' + match.gsub(/[{}]/, '')} %>
<%- if link.has_key?('schema') && (link['schema'].has_key?('properties') || link['schema'].has_key?('example')) %>
  <%-
    data = {}
    if link['schema']['properties']
      link['schema']['properties'].each do |key, value|
        if value.has_key?('anyOf')
          id_ref = value['anyOf'].detect {|ref| ref['$ref'].split('/').last == 'id'}
          data[key] = schema.dereference(id_ref).first['example']
        elsif value.has_key?('properties')
          data[key] = {}
          value['properties'].each do |k,v|
            data[key][k] = schema.dereference(v).first['example']
          end
        else
          data[key] = schema.dereference(value).first['example']
        end
      end
    else
      data.merge!(link['schema']['example'])
    end
  %>
  <%- if link['method'].upcase == 'GET' %>
    <%-
      unless data.empty?
        path << '?'
        data.sort_by {|k,_| k.to_s }.each do |key, values|
          if values.nil?
            path << key.to_s << '&'
          else
            [values].flatten.each do |value|
              path << key.to_s << '=' << CGI.escape(value.to_s) << '&'
            end
          end
        end
        path.chop! # remove trailing '&'
      end
    %>
$ curl -n -X <%= link['method'] %> <%= root_url %><%= path %>
  <%- else %>
$ curl -n -X <%= link['method'] %> <%= root_url %><%= path %> \
-H "Content-Type: application/json" \
-d '<%= data.to_json %>'
  <%- end %>
<%- else %>
$ curl -n -X <%= link['method'] %> <%= root_url %><%= path %>
<%- end %>
```

#### Response Example
```
HTTP/1.1 <%= case link['rel']
when 'create'
  '201 Created'
else
  '200 OK'
end %>
```
```javascript```
<%- if link['rel'] == 'instances' %>
<%= JSON.pretty_generate([serialization]) %>
<%- else %>
<%= JSON.pretty_generate(serialization) %>
<%- end %>
```

<%- end -%>
